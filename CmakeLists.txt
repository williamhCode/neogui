cmake_minimum_required(VERSION 3.0...3.28)

project(
  NeovimGui
  VERSION 0.1.0
  LANGUAGES CXX C
)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)  # clangd

add_subdirectory(deps/webgpu_tools)
add_subdirectory(deps/msgpack)
set(ASIO_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/deps/asio/asio/include)
set(UTFCPP_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/deps/utfcpp/source)
add_subdirectory(deps/tiny_process_library)
add_subdirectory(deps/freetype)

set(APP_SRC
	src/main.cpp

  src/app/window.cpp

  src/editor/state.cpp

  src/gfx/context.cpp
  src/gfx/pipeline.cpp
  src/gfx/renderer.cpp
  src/gfx/font.cpp

  src/nvim/nvim.cpp
  src/nvim/parse.cpp
  src/nvim/input.cpp
)

add_executable(App ${APP_SRC})

# set_target_properties(App PROPERTIES
# )

target_include_directories(App PRIVATE 
  ${PROJECT_SOURCE_DIR}/src
  ${ASIO_INCLUDE_DIR}
  ${UTFCPP_INCLUDE_DIR}
)

target_compile_definitions(App PRIVATE
  ROOT_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
)

target_link_libraries(App PRIVATE 
  WebGPU_Tools
  msgpack-cxx
  tiny-process-library
  freetype
)

if (MSVC)
  target_compile_options(App PRIVATE /W4)
else()
  target_compile_options(App PRIVATE -Wall -Wextra -pedantic)
  # assert in release
  target_compile_options(App PRIVATE -UNDEBUG)
endif()

if(XCODE)
  set_target_properties(App PROPERTIES
    XCODE_GENERATE_SCHEME ON
    XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "Metal"
  )
  set(CMAKE_XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "-o linker-signed")
endif()

